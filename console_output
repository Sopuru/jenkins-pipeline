Started by user admin
Obtained Jenkinsfile from git https://github.com/Sopuru/jenkins-pipeline.git
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/jenkins_home/workspace/docker-anchore-scan-pipeline
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
 > git rev-parse --resolve-git-dir /var/jenkins_home/workspace/docker-anchore-scan-pipeline/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/Sopuru/jenkins-pipeline.git # timeout=10
Fetching upstream changes from https://github.com/Sopuru/jenkins-pipeline.git
 > git --version # timeout=10
 > git --version # 'git version 2.39.5'
 > git fetch --tags --force --progress -- https://github.com/Sopuru/jenkins-pipeline.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
Checking out Revision bf52f34969d60ea00b0ea78d9403bbd8718cdaa8 (refs/remotes/origin/main)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f bf52f34969d60ea00b0ea78d9403bbd8718cdaa8 # timeout=10
Commit message: "Update Jenkinsfile"
 > git rev-list --no-walk b9dc5e8894f816b4f65b50974755c0be5e2afec2 # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Checkout)
[Pipeline] echo
Checking out source code...
[Pipeline] script
[Pipeline] {
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
 > git rev-parse --resolve-git-dir /var/jenkins_home/workspace/docker-anchore-scan-pipeline/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/Sopuru/jenkins-pipeline.git # timeout=10
Fetching upstream changes from https://github.com/Sopuru/jenkins-pipeline.git
 > git --version # timeout=10
 > git --version # 'git version 2.39.5'
 > git fetch --tags --force --progress -- https://github.com/Sopuru/jenkins-pipeline.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
Checking out Revision bf52f34969d60ea00b0ea78d9403bbd8718cdaa8 (refs/remotes/origin/main)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f bf52f34969d60ea00b0ea78d9403bbd8718cdaa8 # timeout=10
Commit message: "Update Jenkinsfile"
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Build Docker Image)
[Pipeline] echo
Building Docker image: sopuru24/joshua:latest
[Pipeline] script
[Pipeline] {
[Pipeline] isUnix
[Pipeline] withEnv
[Pipeline] {
[Pipeline] sh
+ docker build -t sopuru24/joshua:latest --pull .
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  241.7kB

Step 1/5 : FROM jenkins/jenkins:lts
lts: Pulling from jenkins/jenkins
Digest: sha256:f4607803bd1ee4dc91b1695b07d3a04c77b4f575a507ff65375af888e1497662
Status: Image is up to date for jenkins/jenkins:lts
 ---> 29bae57d20f2
Step 2/5 : USER root
 ---> Using cache
 ---> 89b67d866235
Step 3/5 : RUN apt-get update -qq && apt-get install -y --no-install-recommends     apt-transport-https     ca-certificates     curl     gnupg     lsb-release &&     curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg &&     echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian     $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null &&     apt-get update -qq &&     apt-get install -y --no-install-recommends docker-ce-cli &&     rm -rf /var/lib/apt/lists/*
 ---> Using cache
 ---> 8d5716d153ae
Step 4/5 : RUN groupadd -r docker || true && usermod -aG docker jenkins
 ---> Using cache
 ---> d1a07fd8e66e
Step 5/5 : USER jenkins
 ---> Using cache
 ---> edaf5bb551f1
Successfully built edaf5bb551f1
Successfully tagged sopuru24/joshua:latest
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Install Anchorectl CLI)
[Pipeline] echo
Installing anchorectl CLI version v5.18.0...
[Pipeline] sh
+ curl -sSfL https://anchorectl-releases.anchore.io/anchorectl/install.sh
+ sudo sh -s -- -b /usr/local/bin v5.18.0
[info] fetching release script for tag='v5.18.0' 
[info] using release tag='v5.18.0' os='linux' arch='amd64' 
[info] installed /usr/local/bin/anchorectl 
+ anchorectl --version
anchorectl 5.18.0
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Scan with Anchore)
[Pipeline] echo
Scanning Docker image with Anchore: sopuru24/joshua:latest
[Pipeline] script
[Pipeline] {
[Pipeline] withCredentials
Masking supported pattern matches of $ANCHORECTL_USERNAME or $ANCHORECTL_PASSWORD
[Pipeline] {
[Pipeline] sh
+ anchorectl image add sopuru24/joshua:latest
Image:
  status:           analyzed (active)
  tag:              docker.io/sopuru24/joshua:latest
  digest:           sha256:256a0684fdb443cbcfdb8662d31fc0e2fd83376060e68828a63170d001ac41ae
  id:               9e5b0d0fcbc0162aa3905fa02c2f561ed26748616908349ca4385ba7e0c3ac61
  distro:           debian@12 (amd64)
  size:             156 MB
  layers:           8
[Pipeline] echo
Waiting for image analysis to complete in Anchore...
[Pipeline] sh
+ anchorectl image wait sopuru24/joshua:latest
Image related operations

Usage:
  anchorectl image [command]

Available Commands:
  add             analyze a container image
  ancestors       Get image ancestors
  check           Get the policy evaluation for the given image
  content         Get image content
  delete          Delete an image analysis
  get             Get information about a single image
  list            List all images visible to the user
  metadata        Get image metadata
  sbom            Get image sbom in the native Anchore format
  vulnerabilities Get image vulnerabilities

Flags:
  -h, --help   help for image

Use "anchorectl image [command] --help" for more information about a command.

For help regarding global flags, run --help on the root command
[Pipeline] echo
Evaluating image against policy: Anchore Enterprise - Secure v20250101
[Pipeline] sh
+ anchorectl image check --policy Anchore Enterprise - Secure v20250101 sopuru24/joshua:latest
Tag: docker.io/sopuru24/joshua:latest
Digest: sha256:256a0684fdb443cbcfdb8662d31fc0e2fd83376060e68828a63170d001ac41ae
Policy ID: anchore_secure_default
Last Evaluation: 2025-06-25T21:03:51Z
Evaluation: fail
Final Action: stop
Reason: policy_evaluation
[Pipeline] echo
Anchore policy evaluation passed for sopuru24/joshua:latest.
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Declarative: Post Actions)
[Pipeline] echo
Pipeline finished for sopuru24/joshua:latest
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
